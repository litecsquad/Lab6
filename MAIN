/*Lab 6 Psuedo Code
Galilea Olvera, Reagan Wilcox, Julia Meissner */

//Compiler directives 
#include <c8051_SDCC.h>
#include <stdio.h>
#include <stdlib.h>
#include <i2c.h>

//Function prototypes
void Port_Init(void);
void ADC_Init(void);
void XBR0_Init(void);
void SMB_Init(void);
void PCA_Init(void);

void PCA_ISR(void) __interrupt 9;
void read_AD_input(void);
void read_ranger(void);
void read_compass(void);

unsigned int change_pulsewidth (int mode, unsigned int value);
void set_values(void);


//Global Variables
//unsigned char desired_range = 50;
unsigned int MIN_FAN = 2765;
unsigned int RUDDER_CENTER = 2028;
unsigned int MAX_FAN = 3502;
unsigned int RUDDER_PW = 2028;
signed int tmp_PW;
unsigned int counts;			
unsigned int desired_heading;		//user-input
unsigned int Kp;			//
unsigned int Kd;			//
unsigned int battery;			//to be read in P1.3 and AD-converted
unsigned char print; 			//print flag
unsigned char r_ranger;			//ranger flag
unsigned char r_heading;		//compass flag
unsigned char r_print;			//print flag
unsigned int range;			//for storing Read_Ranger
unsigned int heading;			//for storing Read_Compass
//Unsigned int error; 			//

void main(void)
{
	//Declare local variables
	char input;
	unsigned int keypad_reading;
	
	//Initialization functions
	Sys_Init(); 
	putchar(' '); 
	Port_Init();  
	ADC_Init();  
	XBR0_Init(); 
	PCA_Init(); 
	SMB_Init();
	
	//Setup		
	set_values();  //set user inputs for heading, kp, kd
	/*	
	calibrate_compass(void);
	calculate_rotation();
	set_thrust_angle();
	//Run Fans
			// Set_Speed();
			Set_Direction();
		While loop for continuous run
			If read_ranger flag is set
				Clear flag
				Range = Read_ranger();
			If read_heading flag is set
				Clear flag
				Heading = Read_Compass();
			If print flag is set
				Clear flag
				Printf desired_heading, actual_heading, and ranger_reading. 
	If a (TBD) key is hit
		calibrate_compass(void);
	*/
} //end of main

//Functions: Initializations, ISR, Basic Setup
void Port_Init(void)		//Do not touch
{
	//P0.4, P0.5, P0.6 and P0.7  in push-pull
	P0MDOUT |= 0xF0;	//(1111 0000)
}

void ADC_Init(void)		//Do not touch
{
	REF0CN = 0x03; /* Set Vref to use internal reference voltage (2.4V) */
	ADC1CN = 0x80; /* Enable A/D converter (ADC1) */\
	ADC1CF |= 0x01; /* Set A/D converter gain to 1 */
}


void XBR0_Init(void)
{
	XBR0 = 0x25;  //configure crossbar as instructed
	//4 CCMs with CEX outputs on Port pins P0.4, P0.5, P0.6 and P0.7

}

void SMB_Init(void)
{
	SMB0CR=0x93; /* set SCL to 100 kHz (actual freq ~ 94.594 kHz)*/
	ENSMB=1; /* bit 6 of SMB0CN, enable the SMBus */
}
	
void PCA_Init(void)
{
	PCA0CPM0 = PCA0CPM1 = PCA0CPM2 = PCA0CPM3 = 0xC2; //mode 0, 1, 2, 3 in 16-bit compare mode
	PCA0CN = 0x40; 		//  Enable PCA counter
	PCA0MD = 0x81; 		//CF enabled, use SYSCLK/12
	EIE1 |= 0x08;       	// enable PCA Interrupt request (by masking)
	EA = 1;         	// enable global interrupts (by sbit)
}

void PCA_ISR(void) __interrupt 9
{
	if (CF)
	 {
		counts++;	//increment count	
		PCA0 = 28672; //rest to PCA Start
		CF = 0; //reset overflow flag
		
		if ((counts % 4999) == 0)
		{
			counts = 0;
		}	
		//1 overflow = 20ms
		
		//every two overflows (~40ms), read from compass
		if((counts %2) == 0)
		{
			r_heading = 1;
		}
		//every 4 overflows (~80ms), read rager
		if((counts %4) == 0)
		{
			r_ranger = 1;
			
		}	
		//every 20 overflows(~400 ms), print
		if (counts %20 == 0)
		{
			r_print = 1;
		}			
	}
	else
	{
		PCA0CN &= 0xC0;
	}
}

//basic user-input setup
void set_values(void)
{
	lcd_print("Pick a desired heading for the servo\r\nDesired Heading: ");
	desired_heading = kpd_input(0);
	desired_heading*=10;
	lcd_clear();

	lcd_print("Pick a proportional gain\r\nkp =  ");
	Kp = kpd_input(0);
	lcd_clear();

	lcd_print("Pick a derivative gain\r\nkd = : ");
	Kd = kpd_input(0);
	lcd_clear();
}
	
void calibrate_compass(void)
{
	
	//figure out;
}

//Run The Fans: similar to drive_motor function
void run_rudders(void)
{
	PCA0CP2 = 0xFFFF - (RUDDER_CENTER + RUDDER_PW); //Run Left  @ neutral + rudder_PW
	PCA0CP3 = 0xFFFF - (RUDDER_CENTER - RUDDER_PW); //Run Right @ neutral - rudder_PW
	//left and right in opposite directions
}

void run_thrust(void)
{
	
	//Controlled with servo PW //auto updated in Change_PW

}

void read_ranger(void)
{
	unsigned char addr = 0xE0; // the address of the ranger is 0xE0
	unsigned int Data[2];
	
	i2c_read_data(addr, 2, Data, 2);
	
	range = (((unsigned int)Data[0] << 8) | Data[1]);
}

void read_compass(void)
{
	unsigned char addr = 0xC0; // the address of the sensor, 0xC0 for the compass
	unsigned int Data[2]; // an array with a length of 2
	i2c_read_data(addr, 2, Data, 2); // read two byte, starting at reg 2

	heading =(((unsigned int)Data[0] << 8) | Data[1]); //combine the two data values into one value

}

void read_battery(void) // Do not touch
{
    AMX1SL = 3; /* Set P1.n as the analog input for ADC1 */
    ADC1CN = ADC1CN & ~0x20; /* Clear the “Conversion Completed” flag */
    ADC1CN = ADC1CN | 0x10; /* Initiate A/D conversion */
    while ((ADC1CN & 0x20) == 0x00); /* Wait for conversion to complete */
    //ADC conversion //battery V = 4.235 x ADC voltage or 39.7 x ADC0  ? in m
    //battery = voltage in mV
    battery = ADC1; /* Return digital value in ADC1 register */    
}

//Calculate_Rotation();

	
//////////////// debugging functions	
/* Void Set_Speed(void)
	Read  Compass
	Wait specified time
	Read Compass again
	Calculate rotational velocity (change in angle over time)
	while rotational velocity is over a specified value
	kd = 0;
	‘F’ increases kp
	‘S’ decreases kp
	‘K’ sets kp to current kp and exits loop
	change_pulsewidth

Void Set_Direction(void)
	kd = kp = 0
	While (1) //Introduce derivative gain and test different values
	print “setting kd”
	‘F’ increases kd
	‘S’ decreases kd
	‘K’ sets kd to current kd and exits loop
	Change_pulsewidth
	Calculate rotational velocity of fan
		If above threshold, use P control to reduce
		Once P control
Set_Thrust_Angle();
		While (1)
If ‘F’ increases heading
If ‘S’ decreases heading
Change_Pulsewidth
If ‘K’ sets heading and exits loop
*/


//unsigned int Change_Pulsewidth(int mode, unsigned int value)
//REFER TO WKSHT 11
